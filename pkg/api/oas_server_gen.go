// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateTodo implements createTodo operation.
	//
	// Create a new TODO item.
	//
	// POST /todos
	CreateTodo(ctx context.Context, req *CreateTodoRequest) (*Todo, error)
	// DeleteTodo implements deleteTodo operation.
	//
	// Delete a specific TODO item.
	//
	// DELETE /todos/{id}
	DeleteTodo(ctx context.Context, params DeleteTodoParams) error
	// GetTodo implements getTodo operation.
	//
	// Get a specific TODO item.
	//
	// GET /todos/{id}
	GetTodo(ctx context.Context, params GetTodoParams) (*Todo, error)
	// ListTodos implements listTodos operation.
	//
	// Get all TODO items.
	//
	// GET /todos
	ListTodos(ctx context.Context) ([]Todo, error)
	// UpdateTodo implements updateTodo operation.
	//
	// Update a specific TODO item.
	//
	// PUT /todos/{id}
	UpdateTodo(ctx context.Context, req *UpdateTodoRequest, params UpdateTodoParams) (*Todo, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
